# Time Series with Spline Based Models

> Disclaimer: The original source of the following contents is [here](https://asbates.rbind.io/2019/04/19/time-series-with-spline-based-models/)

## Setup

```{r}
#| message: false
library(tidyverse)
library(fields)
library(earth)
library(mgcv)
library(forecast)
```


```{r}
#| message: false
theme_set(theme_bw())

flu <- read_csv("https://raw.githubusercontent.com/asbates/nonlinear-models/master/data/ilinet-calif-up-to-2019-03-31.csv") %>% 
  mutate(t = 1:nrow(.))

flu
```

```{r}
flu %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line()
```

Three spline based models will be explored here

- Thin plate splines (TPS)
- Multivariate Additive Regression Splines (MARS)
- Generalized Additive Models (GAM)

for modeling the time series data.


```{r}
flu_train <- flu %>% filter(week_start < "2019-01-01")
flu_test <- flu %>% filter(week_start >= "2019-01-01")

flu_ts <- ts(flu$ilitotal, frequency = 52)
flu_ts_train <- flu_ts[1:nrow(flu_train)]
flu_ts_test <- flu_ts[(nrow(flu_train) + 1):nrow(flu)]

# TPS requires X, Y splitted
x_train <- flu_train %>% select(t)
y_train <- flu_train %>% select(ilitotal)
x_test <- flu_test %>% select(t)
y_test <- flu_test %>% select(ilitotal)
```

## First Approach

Here we will model `ilitotal` by considering the time index `t` as the predictor.

```{r}
# ARIMA
arima_mod <- auto.arima(flu_ts_train)

# thin plate spline
tps_mod <- Tps(x_train, y_train)

# MARS
mars_mod <- earth(ilitotal ~ t, data = flu_train)

# GAM
gam_mod <- gam(ilitotal ~ s(t), data = flu_train, method = "REML")
```


```{r}
flu_train %>% 
  mutate(
    fitted_arima = fitted(arima_mod),
    fitted_tps = fitted(tps_mod)[, 1],
    fitted_mars = fitted(mars_mod)[, 1],
    fitted_gam = fitted(gam_mod)
  ) -> flu_train_fitted
```


```{r}
flu_train_fitted %>% 
  select(week_start, ilitotal, starts_with("fitted")) %>% 
  pivot_longer(cols = starts_with("fitted"), names_to = "model", values_to = "value") %>% 
  mutate(
    model = str_remove(model, "fitted_")
  ) %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(y = value, color = model))
```

- `MARS` and `GAM` are performing very poorly.

```{r}
flu_test %>% 
  mutate(
    pred_arima = forecast(arima_mod, h = 13)$mean[1:13],
    pred_tps = predict(tps_mod, x_test)[, 1]
  ) -> flu_test_fitted
```


```{r}
flu_test_fitted %>% 
  select(week_start, ilitotal, starts_with("pred")) %>% 
  pivot_longer(cols = starts_with("pred"), names_to = "forecast", values_to = "value") %>% 
  mutate(
    model = str_remove(forecast, "pred_")
  ) %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(y = value, color = forecast))
```

```{r}
flu %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(week_start, pred_arima, color = "arima"), data = flu_test_fitted) + 
  geom_line(aes(week_start, pred_tps, color = "tps"), data = flu_test_fitted) + 
  scale_color_manual(
    values = c("arima" = "blue", "tps" = "red"), name = "model"
  )
```

- `ARIMA` and `TPS` are performing very poorly too.

## Second Approach

Here  `week` and `year` will be used as the predictor instead of `t`

```{r}
x_train <- flu_train %>% select(year, week)
x_test <- flu_test %>% select(year, week)
```

```{r}
# thin plate spline
tps_mod <- Tps(x_train, y_train)

# MARS
mars_mod <- earth(ilitotal ~ year + week, data = flu_train)

# GAM
gam_mod <- gam(ilitotal ~ s(year) + s(week), data = flu_train, method = "REML")
```


```{r}
flu_train %>% 
  mutate(
    fitted_tps = fitted(tps_mod)[, 1],
    fitted_mars = fitted(mars_mod)[, 1],
    fitted_gam = fitted(gam_mod)
  ) -> flu_train_fitted
```


```{r}
flu_train_fitted %>% 
  select(week_start, ilitotal, starts_with("fitted")) %>% 
  pivot_longer(cols = starts_with("fitted"), names_to = "model", values_to = "value") %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(y = value, color = model))
```

```{r}
flu_test %>% 
  mutate(
    pred_tps = predict(tps_mod, x_test)[, 1],
    pred_mars = predict(mars_mod, x_test)[, 1],
    pred_gam = predict(gam_mod, newdata = flu_test)
  ) -> flu_test_fitted
```


```{r}
flu_test_fitted %>% 
  select(week_start, ilitotal, starts_with("pred")) %>% 
  pivot_longer(cols = starts_with("pred"), names_to = "forecast", values_to = "value") %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(y = value, color = forecast))
```

```{r}
flu %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(week_start, pred_tps, color = "tps"), data = flu_test_fitted) + 
  geom_line(aes(week_start, pred_mars, color = "mars"), data = flu_test_fitted) + 
  geom_line(aes(week_start, pred_gam, color = "gam"), data = flu_test_fitted) + 
  scale_color_manual(
    values = c("mars" = "blue", "tps" = "red", "gam" = "green"), name = "model"
  )
```

- `TPS` is still doing better compared to the `GAM` and `MARS`.


## Third Approach

Here four lags of the `ilitotal` will be used as the predictors.

```{r}
flu %>% 
  mutate(
    lag_ilitotal = lag(ilitotal),
    lag2_ilitotal = lag(ilitotal, n = 2L),
    lag3_ilitotal = lag(ilitotal, n = 3L),
    lag4_ilitotal = lag(ilitotal, n = 4L),
  ) -> lagged_flu

lagged_flu
```


```{r}
# TPS can't handle NA
flu_train <- lagged_flu %>% 
  filter(week_start < "2019-01-01" & !is.na(lag4_ilitotal))
  
flu_test <- lagged_flu %>% filter(week_start >= "2019-01-01")

# TPS requires X, Y splited
x_train <- flu_train %>% select(starts_with("lag"))
y_train <- flu_train %>% select(ilitotal)
x_test <- flu_test %>% select(starts_with("lag"))
y_test <- flu_test %>% select(ilitotal)
```


```{r}
tps_mod <- Tps(x_train, y_train)
mars_mod <- earth(ilitotal ~ lag_ilitotal + lag2_ilitotal + 
                    lag3_ilitotal + lag4_ilitotal, data = flu_train)

gam_mod <- gam(
  ilitotal ~ s(lag_ilitotal) + s(lag2_ilitotal) + s(lag3_ilitotal) + s(lag4_ilitotal), 
  method = "REML",
  data = flu_train
)
```


```{r}
flu_train %>% 
  mutate(
    fitted_tps = fitted(tps_mod)[, 1],
    fitted_mars = fitted(mars_mod)[, 1],
    fitted_gam = fitted(gam_mod)
  ) -> flu_train_fitted
```

```{r}
flu_train_fitted %>% 
  select(week_start, ilitotal, starts_with("fitted")) %>% 
  pivot_longer(cols = starts_with("fitted"), names_to = "model", values_to = "value") %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(y = value, color = model))
```

```{r}
flu_test %>% 
  mutate(
    pred_tps = predict(tps_mod, x_test)[, 1],
    pred_mars = predict(mars_mod, x_test)[, 1],
    pred_gam = predict(gam_mod, newdata = flu_test)
  ) -> flu_test_fitted
```


```{r}
flu_test_fitted %>% 
  select(week_start, ilitotal, starts_with("pred")) %>% 
  pivot_longer(cols = starts_with("pred"), names_to = "forecast", values_to = "value") %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(y = value, color = forecast))
```

```{r}
flu %>% 
  ggplot(aes(week_start, ilitotal)) +
  geom_line() +
  geom_line(aes(week_start, pred_tps, color = "tps"), data = flu_test_fitted) + 
  geom_line(aes(week_start, pred_mars, color = "mars"), data = flu_test_fitted) + 
  geom_line(aes(week_start, pred_gam, color = "gam"), data = flu_test_fitted) + 
  scale_color_manual(
    values = c("mars" = "blue", "tps" = "red", "gam" = "green"), name = "model"
  )
```

```{r}
yardstick::metrics(flu_test_fitted, truth = ilitotal, estimate = pred_tps)
yardstick::metrics(flu_test_fitted, truth = ilitotal, estimate = pred_mars)
yardstick::metrics(flu_test_fitted, truth = ilitotal, estimate = pred_gam)
```

- `MARS` is the winner in this case.
