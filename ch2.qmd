## Time Series Graphics

## tsibble objects

```{r}
#| message: false
#| warning: false

library(fpp3)
```


```{r}
#| results: markup
olympic_running
```

- `[4Y]` => Its a every four year data
- There are 14 time series based on the `Length` and `Sex` variable.

```{r}
PBS
```

```{r}
PBS %>% 
  filter(ATC2 == 'A10') %>% 
  select(Month, Concession, Type, Cost)
```

> Note that the index variable `Month`, and the keys `Concession` and `Type`, would be returned even if they were not explicitly selected as they are required for a tsibble (to ensure each row contains a unique combination of keys and index).


```{r}
PBS %>% 
  filter(ATC2 == 'A10') %>% 
  select(Month, Concession, Type, Cost) %>% 
  summarize(total = sum(Cost))
```


```{r}
PBS %>% 
  filter(ATC2 == 'A10') %>% 
  select(Month, Concession, Type, Cost) %>% 
  summarize(total = sum(Cost)) %>% 
  mutate(Cost = total / 1e6) -> a10
```


### Read a csv file and convert it to a tsibble 

```{r}
#| message: false
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
head(prison)
```

```{r}
unique(prison$Date)
```

```{r}
prison %>% 
  mutate(Quarter = yearquarter(Date)) %>% 
  select(-Date) %>% 
  as_tsibble(
    key = c(State, Gender, Legal, Indigenous),
    index = Quarter
  ) -> prison
```


```{r}
#| results: markup

prison
```

### The seasonal period

> Seasonal period: Number of observations before the seasonal pattern repeats. For quarterly, monthly, weekly data, the seasonal period is the number of obs in a year.

> If the data is observed more than once per week, then there is often more than one seasonal pattern in the data. For example, data with daily observations might have weekly (period = 7) or annual (period = 365) seasonal patterns. Similarly, data that are observed every minute might have hourly (period = 60), daily (period = 24 x 60 = 1440), weekly (period = 7 x 24 x 60) and annual seasonality (period = 365 x 24 x 60).


## Time plots

```{r}
a10 %>% 
  autoplot(Cost) +
  labs(
    y = "$ (Millions)",
    title = "Australian anitdiabetic drug sales"
  )
```

## Seasonal plots

```{r}
a10 %>% 
  gg_season(Cost, labels = "both")
```

### Multiple Seasonal Periods

> Where the data has more than one seasonal pattern, the period argument can be used to select which seasonal plot is required.

```{r}
vic_elec %>% 
  gg_season(Demand, period = "day") 
```
```{r}
vic_elec %>% 
  gg_season(Demand, period = "week")
```

## Seasonal subseries plots

```{r}
a10 %>% 
  gg_subseries(Cost)
```

```{r}
tourism
```

```{r}
tourism %>% 
  filter(Purpose == 'Holiday') %>% 
  group_by(State) %>% 
  summarize(Trips = sum(Trips)) -> holidays

holidays
```

```{r}
holidays %>% autoplot(Trips)
```

```{r}
#| fig-height: 10
holidays %>% 
  gg_season(Trips)
```

```{r}
#| fig-height: 10
holidays %>% 
  gg_subseries(Trips)
```


## Measuring Correlation Coefficient

```{r}
#| message: false
#| fig-width: 10
tourism %>% 
  group_by(State) %>% 
  summarise(Trips = sum(Trips)) %>% 
  pivot_wider(names_from = State, values_from = Trips) %>% 
  GGally::ggpairs(columns = 2:9)

```


## Lagged plots

```{r}
aus_production %>% 
  filter(year(Quarter) >= 2000) %>% 
  autoplot(Beer)
```

```{r}
aus_production %>% 
  filter(year(Quarter) >= 2000) -> recent_production
  
recent_production %>% gg_lag(Beer, geom = "point")
```

- Positive correlation at lag 4 and 8 => presence of strong seasonality.


## Autocorrelation

```{r}
recent_production %>% ACF(y = Beer, lag_max = 9)
```

```{r}
recent_production %>% 
  ACF(Beer) %>% 
  autoplot()
```

> So the ACF of a trended time series tends to have positive values that slowly decrease as the lags increase.

> When data are seasonal, the autocorrelations will be larger for the seasonal lags (at multiples of the seasonal period) than for other lags

```{r}
a10 %>% 
  ACF(Cost, lag_max = 48) %>% 
  autoplot() +
  labs(
    title = "Trended and Seasonal"
  )
```

**White Noise**: Time series that show no autocorrelation is called white noise.